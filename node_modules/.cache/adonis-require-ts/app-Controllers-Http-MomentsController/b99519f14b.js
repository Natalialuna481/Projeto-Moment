"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Moment_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Moment"));
const Application_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Application"));
const uuid_1 = require("uuid");
class MomentsController {
    constructor() {
        this.validationOptions = {
            types: ['image'],
            size: '2mb',
        };
    }
    async store({ request, response }) {
        const body = request.body();
        const image = request.file('image', this.validationOptions);
        if (image) {
            const imageName = `${(0, uuid_1.v4)()}.${image.extname}`;
            await image.move(Application_1.default.tmpPath('uploads'), {
                name: imageName,
            });
            body.image = imageName;
        }
        const moment = await Moment_1.default.create(body);
        response.status(201);
        return {
            message: 'Momento criado com sucesso!',
            data: moment,
        };
    }
    async index() {
        const moments = await Moment_1.default.query().preload('comments');
        return {
            data: moments,
        };
    }
    async show({ params }) {
        const moment = await Moment_1.default.findOrFail(params.id);
        await moment.load('comments');
        return {
            data: moment,
        };
    }
    async destroy({ params }) {
        const moment = await Moment_1.default.findOrFail(params.id);
        await moment.delete();
        return {
            message: 'Momento exclu√≠do com sucesso!',
            data: moment,
        };
    }
    async update({ params, request }) {
        const body = request.body();
        const moment = await Moment_1.default.findOrFail(params.id);
        moment.title = body.title;
        moment.description = body.description;
        if (moment.image != body.image || !moment.image) {
            const image = request.file('image', this.validationOptions);
            if (image) {
                const imageName = `${(0, uuid_1.v4)()}.${image.extname}`;
                await image.move(Application_1.default.tmpPath('uploads'), {
                    name: imageName,
                });
                moment.image = imageName;
            }
        }
        await moment.save();
        return {
            message: 'Momento atualizado com sucesso!',
            data: moment,
        };
    }
}
exports.default = MomentsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9tZW50c0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJNb21lbnRzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHFGQUFzQztBQUN0QyxnR0FBc0Q7QUFFdEQsK0JBQW1DO0FBRW5DLE1BQXFCLGlCQUFpQjtJQUF0QztRQUNVLHNCQUFpQixHQUFHO1lBQzFCLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNoQixJQUFJLEVBQUUsS0FBSztTQUNaLENBQUE7SUFxRkgsQ0FBQztJQW5GUSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDM0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO1FBRTNCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBRTNELElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxTQUFTLEdBQUcsR0FBRyxJQUFBLFNBQU0sR0FBRSxJQUFJLEtBQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUVqRCxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQy9DLElBQUksRUFBRSxTQUFTO2FBQ2hCLENBQUMsQ0FBQTtZQUVGLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFBO1NBQ3ZCO1FBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUV4QyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRXBCLE9BQU87WUFDTCxPQUFPLEVBQUUsNkJBQTZCO1lBQ3RDLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQTtJQUNILENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSztRQUNoQixNQUFNLE9BQU8sR0FBRyxNQUFNLGdCQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRXhELE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTztTQUNkLENBQUE7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBdUI7UUFDL0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFakQsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRTdCLE9BQU87WUFDTCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUE7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBdUI7UUFDbEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFakQsTUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7UUFFckIsT0FBTztZQUNMLE9BQU8sRUFBRSwrQkFBK0I7WUFDeEMsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFBO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUF1QjtRQUMxRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7UUFFM0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFakQsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBQ3pCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUVyQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDL0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUE7WUFFM0QsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsTUFBTSxTQUFTLEdBQUcsR0FBRyxJQUFBLFNBQU0sR0FBRSxJQUFJLEtBQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFFakQsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUMvQyxJQUFJLEVBQUUsU0FBUztpQkFDaEIsQ0FBQyxDQUFBO2dCQUVGLE1BQU0sQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFBO2FBQ3pCO1NBQ0Y7UUFFRCxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVuQixPQUFPO1lBQ0wsT0FBTyxFQUFFLGlDQUFpQztZQUMxQyxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUE7SUFDSCxDQUFDO0NBQ0Y7QUF6RkQsb0NBeUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgTW9tZW50IGZyb20gJ0FwcC9Nb2RlbHMvTW9tZW50J1xuaW1wb3J0IEFwcGxpY2F0aW9uIGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvQXBwbGljYXRpb24nXG5cbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbWVudHNDb250cm9sbGVyIHtcbiAgcHJpdmF0ZSB2YWxpZGF0aW9uT3B0aW9ucyA9IHtcbiAgICB0eXBlczogWydpbWFnZSddLFxuICAgIHNpemU6ICcybWInLFxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0LmJvZHkoKVxuXG4gICAgY29uc3QgaW1hZ2UgPSByZXF1ZXN0LmZpbGUoJ2ltYWdlJywgdGhpcy52YWxpZGF0aW9uT3B0aW9ucylcblxuICAgIGlmIChpbWFnZSkge1xuICAgICAgY29uc3QgaW1hZ2VOYW1lID0gYCR7dXVpZHY0KCl9LiR7aW1hZ2UhLmV4dG5hbWV9YFxuXG4gICAgICBhd2FpdCBpbWFnZS5tb3ZlKEFwcGxpY2F0aW9uLnRtcFBhdGgoJ3VwbG9hZHMnKSwge1xuICAgICAgICBuYW1lOiBpbWFnZU5hbWUsXG4gICAgICB9KVxuXG4gICAgICBib2R5LmltYWdlID0gaW1hZ2VOYW1lXG4gICAgfVxuXG4gICAgY29uc3QgbW9tZW50ID0gYXdhaXQgTW9tZW50LmNyZWF0ZShib2R5KVxuXG4gICAgcmVzcG9uc2Uuc3RhdHVzKDIwMSlcblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiAnTW9tZW50byBjcmlhZG8gY29tIHN1Y2Vzc28hJyxcbiAgICAgIGRhdGE6IG1vbWVudCxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5kZXgoKSB7XG4gICAgY29uc3QgbW9tZW50cyA9IGF3YWl0IE1vbWVudC5xdWVyeSgpLnByZWxvYWQoJ2NvbW1lbnRzJylcblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBtb21lbnRzLFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93KHsgcGFyYW1zIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBtb21lbnQgPSBhd2FpdCBNb21lbnQuZmluZE9yRmFpbChwYXJhbXMuaWQpXG5cbiAgICBhd2FpdCBtb21lbnQubG9hZCgnY29tbWVudHMnKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IG1vbWVudCxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSh7IHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgbW9tZW50ID0gYXdhaXQgTW9tZW50LmZpbmRPckZhaWwocGFyYW1zLmlkKVxuXG4gICAgYXdhaXQgbW9tZW50LmRlbGV0ZSgpXG5cbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogJ01vbWVudG8gZXhjbHXDrWRvIGNvbSBzdWNlc3NvIScsXG4gICAgICBkYXRhOiBtb21lbnQsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZSh7IHBhcmFtcywgcmVxdWVzdCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgYm9keSA9IHJlcXVlc3QuYm9keSgpXG5cbiAgICBjb25zdCBtb21lbnQgPSBhd2FpdCBNb21lbnQuZmluZE9yRmFpbChwYXJhbXMuaWQpXG5cbiAgICBtb21lbnQudGl0bGUgPSBib2R5LnRpdGxlXG4gICAgbW9tZW50LmRlc2NyaXB0aW9uID0gYm9keS5kZXNjcmlwdGlvblxuXG4gICAgaWYgKG1vbWVudC5pbWFnZSAhPSBib2R5LmltYWdlIHx8ICFtb21lbnQuaW1hZ2UpIHtcbiAgICAgIGNvbnN0IGltYWdlID0gcmVxdWVzdC5maWxlKCdpbWFnZScsIHRoaXMudmFsaWRhdGlvbk9wdGlvbnMpXG5cbiAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICBjb25zdCBpbWFnZU5hbWUgPSBgJHt1dWlkdjQoKX0uJHtpbWFnZSEuZXh0bmFtZX1gXG5cbiAgICAgICAgYXdhaXQgaW1hZ2UubW92ZShBcHBsaWNhdGlvbi50bXBQYXRoKCd1cGxvYWRzJyksIHtcbiAgICAgICAgICBuYW1lOiBpbWFnZU5hbWUsXG4gICAgICAgIH0pXG5cbiAgICAgICAgbW9tZW50LmltYWdlID0gaW1hZ2VOYW1lXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgbW9tZW50LnNhdmUoKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6ICdNb21lbnRvIGF0dWFsaXphZG8gY29tIHN1Y2Vzc28hJyxcbiAgICAgIGRhdGE6IG1vbWVudCxcbiAgICB9XG4gIH1cbn1cbiJdfQ==